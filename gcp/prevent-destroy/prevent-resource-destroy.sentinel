# This policy uses the Sentinel tfplan import to require that
# no Google BigTable instances are destroyed without Admin approval

##### Imports #####

import "tfplan"
import "strings"

##### Functions #####

# Find all resources of a specific type
# from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resource_maps = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {

    # Compute joined_path from the module path
    if length(path) == 0 {
      joined_path = ""
    } else {
      joined_path = "module." + strings.join(path, ".module.") + "."
    }

    # Append all resources of the specified type to resource_maps
    # setting the key to joined_path. Append the empty map, {}, if the
    # module does not have any resources of the specified type.
    resource_maps[joined_path] = tfplan.module(path).resources[type] else {}
  }

  return resource_maps
}

# Get the full address of a resource instance including modules, type,
# name, and index in form module.<A>.module.<B>.<type>.<name>[<index>]
# joined_path is is returned in keys by find_resources_from_plan
get_instance_address = func(joined_path, type, name, index) {
  address = joined_path + type + "." + name + "[" + string(index) + "]"
  return address
}

# Validate that no GCP BigTable instances are destroyed
validate_bigtable_instances = func() {

  # Initialize validated to true
  # This will be set to false if any instances violate rule
  validated = true

  # Set resource_type
  resource_type = "google_bigtable_instance"

  # Get all resources of specified type
  resource_maps = find_resources_from_plan(resource_type)

  # Loop through the module-level resource maps
  for resource_maps as module_path, resource_map {
    # Loop through the named resources
    for resource_map as name, instances {
      # Loop through resource instances
      for instances as index, r {

        # Get addresses of the resource and the instance
        address = get_instance_address(module_path, resource_type, name, index)

        # Skip resources that are being destroyed
        # to avoid unnecessary policy violations
        if length(r.diff) == 0 {
            print("You are attempting to destroy a resource:", address)
            print("This is not allowed.")
            validated = false
          continue
        } // end computed check
      } // end resource instances
    } // end named resources
  } // end resorce maps

  # Return validated which will be false if there were any violators
  return validated
}

##### Rules #####

# Call the validation function and assign results
bigtable_destroy_allowed = validate_bigtable_instances()

# Main rule
main = rule {
  bigtable_destroy_allowed is true
}